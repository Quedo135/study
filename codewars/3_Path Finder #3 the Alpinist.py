import numpy as np
inf = 10**5                             # can use float('inf'), but int is more useful with numpy arrays

def path_finder(area):
    N = len(area.split())
    mp = np.array([[int(m) for m in line] for line in area.split()])
    visited = np.full((N, N), False)     # point is visited if we watched all its neighbours
    p = np.full((N, N), inf)             # current prices of each point
    p[0,0] = 0                          # starting from point (0,0)
    active_cells = set([(0, 0)])         # points, that was neighbours but not counted as visited

    dx_dy = [(0, 1), (0, -1), (1, 0), (-1, 0)]

    def is_legal(x, y):
        return 0 <= x < N and 0 <= y < N
    
    visited_count = 0
    while visited_count < N*N:  #can also use len(active_cells) criteria
        x,y = min(active_cells, key = lambda a: p[a]) # searching min price at active points set
        for x1, y1 in ((x+dx, y+dy) for dx,dy in dx_dy):
            if is_legal(x1, y1) and not visited[x1, y1]:
                p[x1,y1] = min(p[x1,y1], p[x,y] + abs(mp[x,y] - mp[x1,y1]))
                active_cells.add((x1,y1))   # adding point to active cells if it is legal neigbour

        active_cells.remove((x,y))          # removing cell from active when finishing with it
        visited[x, y] = True
        visited_count += 1

    return(p[N-1,N-1])


a1 = "\n".join([
  "0707",
  "7070",
  "0707",
  "7070"
])
a2 = "\n".join([
        "945050869457750507",
        "673032509245566254",
        "123717968541644329",
        "428642808833694622",
        "164571310039877108",
        "903765650177106995",
        "140787629368702926",
        "393884233563203935",
        "189966618629179380",
        "971699982078964073",
        "325530612276790825",
        "936057303896594500",
        "555551742117098196",
        "658443431243853846",
        "728889280702432988",
        "619548435338938086",
        "939696605356922055",
        "363473965923816544"
])
a3 = "\n".join([
  "711111",
  "077771",
  "077771",
  "077771",
  "077771",
  "000007"
])
a4 = "\n".join([
  "0707",
  "7070",
  "0707",
  "7070"
])
a5 = "\n".join([
"6021209768592883213",
"2345587222926431674",
"7546325255303620316",
"8366405602966639729",
"5657202604063527682",
"2191033178106667161",
"9690501809023175889",
"1363349689093650647",
"6846182741491779845",
"4139576120530870878",
"5182373359144712709",
"4974948885020346317",
"3395706713059279567",
"7282253990208876530",
"6458303107124671214",
"6675404873221740963",
"1460985253478358693",
"0039065258882927349",
"0926833147348982160"
])
a6 = "\n".join([
"915814209585481866444705",
"230883764834592258845810",
"370537775414277200523064",
"057405080441854551401352",
"724352420883846333770147",
"580450787595708488345862",
"663541471319466850032303",
"834549792875809009144375",
"667035408232471134062937",
"461430504877640986127358",
"194572279114177479680176",
"271468877777618137298881",
"454591352152251597796227",
"872416146592709669010919",
"939969803520482657110774",
"330161134201312421836640",
"212237227118215103267008",
"564064082944558313422019",
"394649434048024200140642",
"374042403790739153417925",
"157480456944659902382993",
"639023933346858186502638",
"549575318566280720774611",
"434238241636385033097794"
])

print(path_finder(a1))




